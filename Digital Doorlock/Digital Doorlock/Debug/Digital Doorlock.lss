
Digital Doorlock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000662  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080013a  0080013a  00000730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b0  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b61  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  00002c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000035ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e17  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d8 c0       	rjmp	.+432    	; 0x1d2 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 33       	cpi	r26, 0x3B	; 59
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d2       	rcall	.+1206   	; 0x57a <main>
  c4:	cc c2       	rjmp	.+1432   	; 0x65e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Lcd_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e5 e6       	ldi	r30, 0x65	; 101
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	91 60       	ori	r25, 0x01	; 1
  d0:	90 83       	st	Z, r25
  d2:	90 81       	ld	r25, Z
  d4:	9d 7f       	andi	r25, 0xFD	; 253
  d6:	90 83       	st	Z, r25
  d8:	90 81       	ld	r25, Z
  da:	94 60       	ori	r25, 0x04	; 4
  dc:	90 83       	st	Z, r25
  de:	90 e1       	ldi	r25, 0x10	; 16
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Lcd_Data+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Lcd_Data+0x1e>
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <Lcd_Data+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <Lcd_Data+0x28>
  f0:	80 81       	ld	r24, Z
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <Lcd_Cmd>:
  f8:	e5 e6       	ldi	r30, 0x65	; 101
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	9e 7f       	andi	r25, 0xFE	; 254
 100:	90 83       	st	Z, r25
 102:	90 81       	ld	r25, Z
 104:	9d 7f       	andi	r25, 0xFD	; 253
 106:	90 83       	st	Z, r25
 108:	90 81       	ld	r25, Z
 10a:	94 60       	ori	r25, 0x04	; 4
 10c:	90 83       	st	Z, r25
 10e:	90 e1       	ldi	r25, 0x10	; 16
 110:	9a 95       	dec	r25
 112:	f1 f7       	brne	.-4      	; 0x110 <Lcd_Cmd+0x18>
 114:	00 c0       	rjmp	.+0      	; 0x116 <Lcd_Cmd+0x1e>
 116:	8b bb       	out	0x1b, r24	; 27
 118:	80 e1       	ldi	r24, 0x10	; 16
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <Lcd_Cmd+0x22>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Lcd_Cmd+0x28>
 120:	80 81       	ld	r24, Z
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <Lcd_CHAR>:
 128:	cf df       	rcall	.-98     	; 0xc8 <Lcd_Data>
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <Lcd_CHAR+0x6>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Lcd_CHAR+0xc>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <Lcd_STR>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Lcd_STR+0xc>
 140:	f3 df       	rcall	.-26     	; 0x128 <Lcd_CHAR>
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	88 81       	ld	r24, Y
 146:	81 11       	cpse	r24, r1
 148:	fb cf       	rjmp	.-10     	; 0x140 <Lcd_STR+0x8>
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <Lcd_Pos>:
 150:	90 e4       	ldi	r25, 0x40	; 64
 152:	89 9f       	mul	r24, r25
 154:	60 0d       	add	r22, r0
 156:	11 24       	eor	r1, r1
 158:	86 2f       	mov	r24, r22
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	cd df       	rcall	.-102    	; 0xf8 <Lcd_Cmd>
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <Lcd_Pos+0x12>
 166:	00 c0       	rjmp	.+0      	; 0x168 <Lcd_Pos+0x18>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <Lcd_Clear>:
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	c4 df       	rcall	.-120    	; 0xf8 <Lcd_Cmd>
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Lcd_Clear+0x8>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Lcd_Clear+0xe>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	bb df       	rcall	.-138    	; 0xf8 <Lcd_Cmd>
 182:	83 ef       	ldi	r24, 0xF3	; 243
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Lcd_Init+0x8>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Lcd_Init+0xe>
 18c:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	b3 df       	rcall	.-154    	; 0xf8 <Lcd_Cmd>
 192:	83 ef       	ldi	r24, 0xF3	; 243
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Lcd_Init+0x18>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <Lcd_Init+0x1e>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 19c:	00 00       	nop
 19e:	88 e3       	ldi	r24, 0x38	; 56
 1a0:	ab df       	rcall	.-170    	; 0xf8 <Lcd_Cmd>
 1a2:	83 ef       	ldi	r24, 0xF3	; 243
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Lcd_Init+0x28>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 1ac:	00 00       	nop
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	a3 df       	rcall	.-186    	; 0xf8 <Lcd_Cmd>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Lcd_Init+0x38>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Lcd_Init+0x3e>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 1bc:	00 00       	nop
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	9b df       	rcall	.-202    	; 0xf8 <Lcd_Cmd>
 1c2:	83 ef       	ldi	r24, 0xF3	; 243
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Lcd_Init+0x48>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <Lcd_Init+0x4e>
	_delay_ms(2);
	Lcd_Clear();
 1cc:	00 00       	nop
 1ce:	ce cf       	rjmp	.-100    	; 0x16c <Lcd_Clear>
 1d0:	08 95       	ret

000001d2 <__vector_8>:
unsigned char PW[5] = "1111";
unsigned int DoReMi[8] = {523,587, 659, 698, 783,880, 987, 1046};

unsigned char signal = 0;
SIGNAL(INT7_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
	signal = ~signal;
 1de:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 1e2:	80 95       	com	r24
 1e4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
}
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <keyscan>:
}


unsigned char keyscan()
{
	PORTF = 0x08; //0b 0000 1000
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1fa:	83 e3       	ldi	r24, 0x33	; 51
 1fc:	97 e0       	ldi	r25, 0x07	; 7
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <keyscan+0xa>
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '1';	//0000 0111 & 0000 0001 = 000 0001 '1'
 202:	80 b1       	in	r24, 0x00	; 0
 204:	87 70       	andi	r24, 0x07	; 7
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	09 f4       	brne	.+2      	; 0x20c <keyscan+0x18>
 20a:	60 c0       	rjmp	.+192    	; 0x2cc <keyscan+0xd8>
	else if((PINF & 0x07) == 0x02) return '2';
 20c:	80 b1       	in	r24, 0x00	; 0
 20e:	87 70       	andi	r24, 0x07	; 7
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	09 f4       	brne	.+2      	; 0x216 <keyscan+0x22>
 214:	5d c0       	rjmp	.+186    	; 0x2d0 <keyscan+0xdc>
	else if((PINF & 0x07) == 0x04) return '3';
 216:	80 b1       	in	r24, 0x00	; 0
 218:	87 70       	andi	r24, 0x07	; 7
 21a:	84 30       	cpi	r24, 0x04	; 4
 21c:	09 f4       	brne	.+2      	; 0x220 <keyscan+0x2c>
 21e:	5a c0       	rjmp	.+180    	; 0x2d4 <keyscan+0xe0>
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	97 e4       	ldi	r25, 0x47	; 71
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <keyscan+0x30>
 228:	00 c0       	rjmp	.+0      	; 0x22a <keyscan+0x36>
 22a:	00 00       	nop
	_delay_ms(10);

	PORTF = 0x10;		// 0b 0001 0000
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <keyscan+0x42>
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '4';
 23a:	80 b1       	in	r24, 0x00	; 0
 23c:	87 70       	andi	r24, 0x07	; 7
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	09 f4       	brne	.+2      	; 0x244 <keyscan+0x50>
 242:	4a c0       	rjmp	.+148    	; 0x2d8 <keyscan+0xe4>
	else if((PINF & 0x07) == 0x02) return '5';
 244:	80 b1       	in	r24, 0x00	; 0
 246:	87 70       	andi	r24, 0x07	; 7
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	09 f4       	brne	.+2      	; 0x24e <keyscan+0x5a>
 24c:	47 c0       	rjmp	.+142    	; 0x2dc <keyscan+0xe8>
	else if((PINF & 0x07) == 0x04) return '6';
 24e:	80 b1       	in	r24, 0x00	; 0
 250:	87 70       	andi	r24, 0x07	; 7
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	09 f4       	brne	.+2      	; 0x258 <keyscan+0x64>
 256:	44 c0       	rjmp	.+136    	; 0x2e0 <keyscan+0xec>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	97 e4       	ldi	r25, 0x47	; 71
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <keyscan+0x68>
 260:	00 c0       	rjmp	.+0      	; 0x262 <keyscan+0x6e>
 262:	00 00       	nop
	_delay_ms(10);

	PORTF = 0x20;		// 0b 0010 0000
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 26a:	83 e3       	ldi	r24, 0x33	; 51
 26c:	97 e0       	ldi	r25, 0x07	; 7
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <keyscan+0x7a>
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '7';
 272:	80 b1       	in	r24, 0x00	; 0
 274:	87 70       	andi	r24, 0x07	; 7
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	a9 f1       	breq	.+106    	; 0x2e4 <keyscan+0xf0>
	else if((PINF & 0x07) == 0x02) return '8';
 27a:	80 b1       	in	r24, 0x00	; 0
 27c:	87 70       	andi	r24, 0x07	; 7
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	99 f1       	breq	.+102    	; 0x2e8 <keyscan+0xf4>
	else if((PINF & 0x07) == 0x04) return '9';
 282:	80 b1       	in	r24, 0x00	; 0
 284:	87 70       	andi	r24, 0x07	; 7
 286:	84 30       	cpi	r24, 0x04	; 4
 288:	89 f1       	breq	.+98     	; 0x2ec <keyscan+0xf8>
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	97 e4       	ldi	r25, 0x47	; 71
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <keyscan+0x9a>
 292:	00 c0       	rjmp	.+0      	; 0x294 <keyscan+0xa0>
 294:	00 00       	nop
	_delay_ms(10);

	PORTF = 0x40;		// 0b 0100 0000
 296:	80 e4       	ldi	r24, 0x40	; 64
 298:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	97 e0       	ldi	r25, 0x07	; 7
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <keyscan+0xac>
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '*';
 2a4:	80 b1       	in	r24, 0x00	; 0
 2a6:	87 70       	andi	r24, 0x07	; 7
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	11 f1       	breq	.+68     	; 0x2f0 <keyscan+0xfc>
	else if((PINF & 0x07) == 0x02) return '0';
 2ac:	80 b1       	in	r24, 0x00	; 0
 2ae:	87 70       	andi	r24, 0x07	; 7
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	01 f1       	breq	.+64     	; 0x2f4 <keyscan+0x100>
	else if((PINF & 0x07) == 0x04) return '#';
 2b4:	80 b1       	in	r24, 0x00	; 0
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	84 30       	cpi	r24, 0x04	; 4
 2ba:	f1 f0       	breq	.+60     	; 0x2f8 <keyscan+0x104>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	97 e4       	ldi	r25, 0x47	; 71
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <keyscan+0xcc>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <keyscan+0xd2>
 2c6:	00 00       	nop
	_delay_ms(10);

	return 0;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret

unsigned char keyscan()
{
	PORTF = 0x08; //0b 0000 1000
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '1';	//0000 0111 & 0000 0001 = 000 0001 '1'
 2cc:	81 e3       	ldi	r24, 0x31	; 49
 2ce:	08 95       	ret
	else if((PINF & 0x07) == 0x02) return '2';
 2d0:	82 e3       	ldi	r24, 0x32	; 50
 2d2:	08 95       	ret
	else if((PINF & 0x07) == 0x04) return '3';
 2d4:	83 e3       	ldi	r24, 0x33	; 51
 2d6:	08 95       	ret
	_delay_ms(10);

	PORTF = 0x10;		// 0b 0001 0000
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '4';
 2d8:	84 e3       	ldi	r24, 0x34	; 52
 2da:	08 95       	ret
	else if((PINF & 0x07) == 0x02) return '5';
 2dc:	85 e3       	ldi	r24, 0x35	; 53
 2de:	08 95       	ret
	else if((PINF & 0x07) == 0x04) return '6';
 2e0:	86 e3       	ldi	r24, 0x36	; 54
 2e2:	08 95       	ret
	_delay_ms(10);

	PORTF = 0x20;		// 0b 0010 0000
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '7';
 2e4:	87 e3       	ldi	r24, 0x37	; 55
 2e6:	08 95       	ret
	else if((PINF & 0x07) == 0x02) return '8';
 2e8:	88 e3       	ldi	r24, 0x38	; 56
 2ea:	08 95       	ret
	else if((PINF & 0x07) == 0x04) return '9';
 2ec:	89 e3       	ldi	r24, 0x39	; 57
 2ee:	08 95       	ret
	_delay_ms(10);

	PORTF = 0x40;		// 0b 0100 0000
	_delay_ms(1);
	if((PINF & 0x07) == 0x01) return '*';
 2f0:	8a e2       	ldi	r24, 0x2A	; 42
 2f2:	08 95       	ret
	else if((PINF & 0x07) == 0x02) return '0';
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	08 95       	ret
	else if((PINF & 0x07) == 0x04) return '#';
 2f8:	83 e2       	ldi	r24, 0x23	; 35

	return 0;
	
	
	
}
 2fa:	08 95       	ret

000002fc <btn_check>:

unsigned char btn_check(unsigned char pw[])
{
	if(strcmp(pw,PW) == 0)
 2fc:	60 e1       	ldi	r22, 0x10	; 16
 2fe:	71 e0       	ldi	r23, 0x01	; 1
 300:	a5 d1       	rcall	.+842    	; 0x64c <strcmp>
 302:	89 2b       	or	r24, r25
 304:	11 f4       	brne	.+4      	; 0x30a <btn_check+0xe>
		return 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	08 95       	ret
	else
		return 0;
 30a:	80 e0       	ldi	r24, 0x00	; 0
	
	
}
 30c:	08 95       	ret

0000030e <Open_Door>:

void Open_Door()
{
	PORTC = 0x10;	// 0001 0000 => 1 step
 30e:	80 e1       	ldi	r24, 0x10	; 16
 310:	85 bb       	out	0x15, r24	; 21
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	8f e7       	ldi	r24, 0x7F	; 127
 316:	96 e1       	ldi	r25, 0x16	; 22
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <Open_Door+0xa>
 320:	00 c0       	rjmp	.+0      	; 0x322 <Open_Door+0x14>
 322:	00 00       	nop
	_delay_ms(1000) ;
			
	PORTC = 0x20;	//0010 0000 => 2 step
 324:	80 e2       	ldi	r24, 0x20	; 32
 326:	85 bb       	out	0x15, r24	; 21
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	8f e7       	ldi	r24, 0x7F	; 127
 32c:	96 e1       	ldi	r25, 0x16	; 22
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <Open_Door+0x20>
 336:	00 c0       	rjmp	.+0      	; 0x338 <Open_Door+0x2a>
 338:	00 00       	nop
	_delay_ms(1000);
			
	PORTC = 0x40;	//0100 0000 => 3 step
 33a:	80 e4       	ldi	r24, 0x40	; 64
 33c:	85 bb       	out	0x15, r24	; 21
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	8f e7       	ldi	r24, 0x7F	; 127
 342:	96 e1       	ldi	r25, 0x16	; 22
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <Open_Door+0x36>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <Open_Door+0x40>
 34e:	00 00       	nop
	_delay_ms(1000);
			
	PORTC = 0x80;	//1000 0000 => 4 step
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	85 bb       	out	0x15, r24	; 21
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	9c e2       	ldi	r25, 0x2C	; 44
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <Open_Door+0x4c>
 362:	00 c0       	rjmp	.+0      	; 0x364 <Open_Door+0x56>
 364:	00 00       	nop
 366:	08 95       	ret

00000368 <Buzzer>:
	_delay_ms(2000);
	
}

void Buzzer( unsigned char mode)
{
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
	
	if (mode == 1)
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	a9 f5       	brne	.+106    	; 0x3de <Buzzer+0x76>
 374:	2e c0       	rjmp	.+92     	; 0x3d2 <Buzzer+0x6a>
	{
		for (int i = 0;i<3;i++)
		{
			for(int i = 0 ; i < 3 ; i++ )
			{
				ICR1 = F_CPU / DoReMi[i];	//입력캡쳐시 TCNTx의 카운터 값을 지정 CTC MODE => TCNTx == TOP
 376:	fe 01       	movw	r30, r28
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	e0 50       	subi	r30, 0x00	; 0
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	20 81       	ld	r18, Z
 382:	31 81       	ldd	r19, Z+1	; 0x01
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	70 e8       	ldi	r23, 0x80	; 128
 38c:	80 e7       	ldi	r24, 0x70	; 112
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	3b d1       	rcall	.+630    	; 0x608 <__udivmodsi4>
 392:	37 bd       	out	0x27, r19	; 39
 394:	26 bd       	out	0x26, r18	; 38
				OCR1C = ICR1/2;		//듀티비(한 주기에서 High 비율 결정)
 396:	86 b5       	in	r24, 0x26	; 38
 398:	97 b5       	in	r25, 0x27	; 39
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3a2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
				TCCR1A |= 1<<COM1C0;
 3a6:	8f b5       	in	r24, 0x2f	; 47
 3a8:	84 60       	ori	r24, 0x04	; 4
 3aa:	8f bd       	out	0x2f, r24	; 47
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	8f e3       	ldi	r24, 0x3F	; 63
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <Buzzer+0x4a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <Buzzer+0x54>
 3bc:	00 00       	nop
	
	if (mode == 1)
	{
		for (int i = 0;i<3;i++)
		{
			for(int i = 0 ; i < 3 ; i++ )
 3be:	21 96       	adiw	r28, 0x01	; 1
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <Buzzer+0x5e>
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	c3 30       	cpi	r28, 0x03	; 3
 3c8:	d1 05       	cpc	r29, r1
 3ca:	ac f2       	brlt	.-86     	; 0x376 <Buzzer+0xe>
void Buzzer( unsigned char mode)
{
	
	if (mode == 1)
	{
		for (int i = 0;i<3;i++)
 3cc:	0f 5f       	subi	r16, 0xFF	; 255
 3ce:	1f 4f       	sbci	r17, 0xFF	; 255
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <Buzzer+0x6e>
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	03 30       	cpi	r16, 0x03	; 3
 3d8:	11 05       	cpc	r17, r1
 3da:	9c f3       	brlt	.-26     	; 0x3c2 <Buzzer+0x5a>
 3dc:	21 c0       	rjmp	.+66     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

			
	}
	else
	{
		ICR1 = F_CPU / DoReMi[7];	//입력캡쳐시 TCNTx의 카운터 값을 지정 CTC MODE => TCNTx == TOP
 3de:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
 3e2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e8       	ldi	r23, 0x80	; 128
 3ee:	80 e7       	ldi	r24, 0x70	; 112
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0a d1       	rcall	.+532    	; 0x608 <__udivmodsi4>
 3f4:	37 bd       	out	0x27, r19	; 39
 3f6:	26 bd       	out	0x26, r18	; 38
		OCR1C = ICR1/2;
 3f8:	86 b5       	in	r24, 0x26	; 38
 3fa:	97 b5       	in	r25, 0x27	; 39
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 404:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		TCCR1A |= 1<<COM1C0;
 408:	8f b5       	in	r24, 0x2f	; 47
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	8f bd       	out	0x2f, r24	; 47
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	8f e7       	ldi	r24, 0x7F	; 127
 412:	93 e4       	ldi	r25, 0x43	; 67
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
		_delay_ms(3000);
		
	}
	
	TCCR1A = 0;
 420:	1f bc       	out	0x2f, r1	; 47
	
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <Door_lock>:
	
	return 0;
}

void Door_lock()
{
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	64 97       	sbiw	r28, 0x14	; 20
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
		
	unsigned char pw[5];
	unsigned char temp = 0;
	unsigned char temp02[15] = {0};
 444:	fe 01       	movw	r30, r28
 446:	36 96       	adiw	r30, 0x06	; 6
 448:	8f e0       	ldi	r24, 0x0F	; 15
 44a:	df 01       	movw	r26, r30
 44c:	1d 92       	st	X+, r1
 44e:	8a 95       	dec	r24
 450:	e9 f7       	brne	.-6      	; 0x44c <Door_lock+0x20>
	int btn_cnt = 0;
	
	
	//while (1) 
	//{	
		Lcd_STR((unsigned char*)signal);
 452:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	6f de       	rcall	.-802    	; 0x138 <Lcd_STR>
			
		//초기화
		for (int i =0 ; i <5 ; i++)
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0f c0       	rjmp	.+30     	; 0x47e <Door_lock+0x52>
		{
			temp02[i] = 0;
 460:	e6 e0       	ldi	r30, 0x06	; 6
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ec 0f       	add	r30, r28
 466:	fd 1f       	adc	r31, r29
 468:	e8 0f       	add	r30, r24
 46a:	f9 1f       	adc	r31, r25
 46c:	10 82       	st	Z, r1
			pw[i] = 0;
 46e:	e1 e0       	ldi	r30, 0x01	; 1
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ec 0f       	add	r30, r28
 474:	fd 1f       	adc	r31, r29
 476:	e8 0f       	add	r30, r24
 478:	f9 1f       	adc	r31, r25
 47a:	10 82       	st	Z, r1
	//while (1) 
	//{	
		Lcd_STR((unsigned char*)signal);
			
		//초기화
		for (int i =0 ; i <5 ; i++)
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	85 30       	cpi	r24, 0x05	; 5
 480:	91 05       	cpc	r25, r1
 482:	74 f3       	brlt	.-36     	; 0x460 <Door_lock+0x34>
 484:	00 e0       	ldi	r16, 0x00	; 0
 486:	10 e0       	ldi	r17, 0x00	; 0
 488:	29 c0       	rjmp	.+82     	; 0x4dc <Door_lock+0xb0>
		}

		while (btn_cnt<4)
		{
			//버튼을 누르시오 :: 4개의 비밀번호를 설정, 키패드를 통해 4개의 패스워드 입력
			Lcd_Pos(0,0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	60 de       	rcall	.-832    	; 0x150 <Lcd_Pos>
			Lcd_STR((unsigned char*)"Press Button");	//출력한다
 490:	85 e1       	ldi	r24, 0x15	; 21
 492:	91 e0       	ldi	r25, 0x01	; 1
			
			temp = keyscan();	//담는다
 494:	51 de       	rcall	.-862    	; 0x138 <Lcd_STR>
 496:	ae de       	rcall	.-676    	; 0x1f4 <keyscan>
			
			
			
			if(temp != 0)
 498:	88 23       	and	r24, r24
 49a:	01 f1       	breq	.+64     	; 0x4dc <Door_lock+0xb0>
			{
				pw[btn_cnt] = temp;
 49c:	e1 e0       	ldi	r30, 0x01	; 1
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ec 0f       	add	r30, r28
 4a2:	fd 1f       	adc	r31, r29
 4a4:	e0 0f       	add	r30, r16
 4a6:	f1 1f       	adc	r31, r17
 4a8:	80 83       	st	Z, r24
			
				temp02[btn_cnt] = '*';
 4aa:	e6 e0       	ldi	r30, 0x06	; 6
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	ec 0f       	add	r30, r28
 4b0:	fd 1f       	adc	r31, r29
 4b2:	e0 0f       	add	r30, r16
 4b4:	f1 1f       	adc	r31, r17
 4b6:	8a e2       	ldi	r24, 0x2A	; 42
				Lcd_Pos(1,1);
 4b8:	80 83       	st	Z, r24
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	81 e0       	ldi	r24, 0x01	; 1
				Lcd_STR(temp02);
 4be:	48 de       	rcall	.-880    	; 0x150 <Lcd_Pos>
 4c0:	ce 01       	movw	r24, r28
 4c2:	06 96       	adiw	r24, 0x06	; 6
 4c4:	39 de       	rcall	.-910    	; 0x138 <Lcd_STR>
 4c6:	bf ef       	ldi	r27, 0xFF	; 255
 4c8:	2f e7       	ldi	r18, 0x7F	; 127
 4ca:	86 e1       	ldi	r24, 0x16	; 22
 4cc:	b1 50       	subi	r27, 0x01	; 1
 4ce:	20 40       	sbci	r18, 0x00	; 0
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <Door_lock+0xa0>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <Door_lock+0xaa>
 4d6:	00 00       	nop
				
				_delay_ms(1000);
				btn_cnt++;				
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			temp02[i] = 0;
			pw[i] = 0;
		}

		while (btn_cnt<4)
 4dc:	04 30       	cpi	r16, 0x04	; 4
 4de:	11 05       	cpc	r17, r1
 4e0:	a4 f2       	brlt	.-88     	; 0x48a <Door_lock+0x5e>
		
		}
		

		
		if(btn_cnt == 4)
 4e2:	04 30       	cpi	r16, 0x04	; 4
 4e4:	11 05       	cpc	r17, r1
 4e6:	09 f0       	breq	.+2      	; 0x4ea <Door_lock+0xbe>
		{

			
			if(btn_check(pw) == 1)
 4e8:	3d c0       	rjmp	.+122    	; 0x564 <Door_lock+0x138>
 4ea:	ce 01       	movw	r24, r28
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	06 df       	rcall	.-500    	; 0x2fc <btn_check>
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	c9 f4       	brne	.+50     	; 0x526 <Door_lock+0xfa>
			{
				//맞으면 스탭모터 구동, LCD에 OPEN 출력, 부저음 발생.
				Lcd_Clear();
 4f4:	3b de       	rcall	.-906    	; 0x16c <Lcd_Clear>
 4f6:	af ef       	ldi	r26, 0xFF	; 255
 4f8:	bb e6       	ldi	r27, 0x6B	; 107
 4fa:	11 97       	sbiw	r26, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <Door_lock+0xce>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <Door_lock+0xd4>
				_delay_ms(15);
				
				Lcd_Pos(1,0);				
 500:	00 00       	nop
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	24 de       	rcall	.-952    	; 0x150 <Lcd_Pos>
				Lcd_STR((unsigned char*)"OPEN");
 508:	82 e2       	ldi	r24, 0x22	; 34
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	15 de       	rcall	.-982    	; 0x138 <Lcd_STR>
 50e:	b9 e9       	ldi	r27, 0x99	; 153
 510:	29 eb       	ldi	r18, 0xB9	; 185
 512:	86 e1       	ldi	r24, 0x16	; 22
 514:	b1 50       	subi	r27, 0x01	; 1
 516:	20 40       	sbci	r18, 0x00	; 0
 518:	80 40       	sbci	r24, 0x00	; 0
				_delay_ms(1010);
								
				Buzzer(1);
 51a:	e1 f7       	brne	.-8      	; 0x514 <Door_lock+0xe8>
 51c:	00 00       	nop
 51e:	81 e0       	ldi	r24, 0x01	; 1

				Open_Door();
 520:	23 df       	rcall	.-442    	; 0x368 <Buzzer>
 522:	f5 de       	rcall	.-534    	; 0x30e <Open_Door>
			
			}
			else
			{
				//LCD창에 ERROR NUMBER , 부저음 발생.
				Lcd_Clear();
 524:	18 c0       	rjmp	.+48     	; 0x556 <Door_lock+0x12a>
 526:	22 de       	rcall	.-956    	; 0x16c <Lcd_Clear>
 528:	af ef       	ldi	r26, 0xFF	; 255
 52a:	bb e6       	ldi	r27, 0x6B	; 107
 52c:	11 97       	sbiw	r26, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <Door_lock+0x100>
 530:	00 c0       	rjmp	.+0      	; 0x532 <Door_lock+0x106>
				_delay_ms(15);
				Lcd_Pos(1,0);
 532:	00 00       	nop
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
				Lcd_STR((unsigned char*)"WORNG");
 538:	0b de       	rcall	.-1002   	; 0x150 <Lcd_Pos>
 53a:	87 e2       	ldi	r24, 0x27	; 39
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	fc dd       	rcall	.-1032   	; 0x138 <Lcd_STR>
 540:	bf ef       	ldi	r27, 0xFF	; 255
 542:	2f e7       	ldi	r18, 0x7F	; 127
 544:	86 e1       	ldi	r24, 0x16	; 22
 546:	b1 50       	subi	r27, 0x01	; 1
 548:	20 40       	sbci	r18, 0x00	; 0
 54a:	80 40       	sbci	r24, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <Door_lock+0x11a>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <Door_lock+0x124>
				_delay_ms(1000);
				Buzzer(0);
 550:	00 00       	nop
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	09 df       	rcall	.-494    	; 0x368 <Buzzer>
				


			}	
			
			Lcd_Clear();
 556:	0a de       	rcall	.-1004   	; 0x16c <Lcd_Clear>
 558:	af ef       	ldi	r26, 0xFF	; 255
 55a:	b7 e4       	ldi	r27, 0x47	; 71
 55c:	11 97       	sbiw	r26, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <Door_lock+0x130>
 560:	00 c0       	rjmp	.+0      	; 0x562 <Door_lock+0x136>
 562:	00 00       	nop
 564:	64 96       	adiw	r28, 0x14	; 20

		}
	//}
	

}
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <main>:
 57a:	88 ef       	ldi	r24, 0xF8	; 248

	*/
	
	
	
	DDRF = 0xF8;	//button
 57c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0x07;	//0b 0000 0111
 580:	87 e0       	ldi	r24, 0x07	; 7
 582:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		
	DDRC = 0xFF;	//Motor
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	84 bb       	out	0x14, r24	; 20
		
	DDRA = 0xFF;	//LCD
 58a:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0xFF;	//LCD 친구
 58c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		
	DDRB = 0x80;	//PIEZO
 590:	80 e8       	ldi	r24, 0x80	; 128
 592:	87 bb       	out	0x17, r24	; 23
		
	//TCCR1A = 0x00; // WGM1(1:0) = “00”
	TCCR1B |= (1 << WGM13) | (1 << WGM12);// WGM1(3:2) = “11”
 594:	9e b5       	in	r25, 0x2e	; 46
 596:	98 61       	ori	r25, 0x18	; 24
 598:	9e bd       	out	0x2e, r25	; 46
	TCCR1B |= (1 << CS10); // CS1(2:0) = “001” 1분주 사용
 59a:	9e b5       	in	r25, 0x2e	; 46
 59c:	91 60       	ori	r25, 0x01	; 1
 59e:	9e bd       	out	0x2e, r25	; 46
	TCCR1C = 0x00; // WGM1(3:0) = “1100”, CTC, 모드 12
 5a0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		
	TCNT1 = 0x0000;
 5a4:	1d bc       	out	0x2d, r1	; 45
 5a6:	1c bc       	out	0x2c, r1	; 44
	
	EIMSK = 1 << INT7;
 5a8:	89 bf       	out	0x39, r24	; 57
	//EICRA = 1 << ISC01 | 0 << ISC00;
	EICRB = 1 << ISC71;	//기본설정값이 0이다 => 0은 굳이 설정하지않아도 된다.
 5aa:	8a bf       	out	0x3a, r24	; 58
	//하강 엣지 :: Height -> Low LEVEL :: 버튼을 땔 때 동작
	//상승 엣지 :: Low -> Height LEVEL :: 버튼을 누를 때 동작
	
	sei();
 5ac:	78 94       	sei
	
	Lcd_Init();
 5ae:	e7 dd       	rcall	.-1074   	; 0x17e <Lcd_Init>
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	8f e3       	ldi	r24, 0x3F	; 63
 5b4:	9b e0       	ldi	r25, 0x0B	; 11
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <main+0x3c>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0x46>
	_delay_ms(500);
	Lcd_Clear();
 5c0:	00 00       	nop
 5c2:	d4 dd       	rcall	.-1112   	; 0x16c <Lcd_Clear>
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	9b e6       	ldi	r25, 0x6B	; 107
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <main+0x4e>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x54>
 5ce:	00 00       	nop
	_delay_ms(15);
	while(1)
	{

		
		if(signal)
 5d0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 5d4:	88 23       	and	r24, r24
		{
			Door_lock();
 5d6:	11 f0       	breq	.+4      	; 0x5dc <main+0x62>
 5d8:	29 df       	rcall	.-430    	; 0x42c <Door_lock>
		}
		else
		{	
			Lcd_Clear();
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <main+0x7c>
 5dc:	c7 dd       	rcall	.-1138   	; 0x16c <Lcd_Clear>
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	9b e6       	ldi	r25, 0x6B	; 107
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <main+0x68>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0x6e>
			_delay_ms(15);
			Lcd_Pos(0,0);
 5e8:	00 00       	nop
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	80 e0       	ldi	r24, 0x00	; 0
			Lcd_STR((unsigned char*)"***Locked***");
 5ee:	b0 dd       	rcall	.-1184   	; 0x150 <Lcd_Pos>
 5f0:	8d e2       	ldi	r24, 0x2D	; 45
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	a1 dd       	rcall	.-1214   	; 0x138 <Lcd_STR>
 5f6:	99 e9       	ldi	r25, 0x99	; 153
 5f8:	29 eb       	ldi	r18, 0xB9	; 185
 5fa:	86 e1       	ldi	r24, 0x16	; 22
 5fc:	91 50       	subi	r25, 0x01	; 1
 5fe:	20 40       	sbci	r18, 0x00	; 0
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x82>
 604:	00 00       	nop
 606:	e4 cf       	rjmp	.-56     	; 0x5d0 <main+0x56>

00000608 <__udivmodsi4>:
 608:	a1 e2       	ldi	r26, 0x21	; 33
 60a:	1a 2e       	mov	r1, r26
 60c:	aa 1b       	sub	r26, r26
 60e:	bb 1b       	sub	r27, r27
 610:	fd 01       	movw	r30, r26
 612:	0d c0       	rjmp	.+26     	; 0x62e <__udivmodsi4_ep>

00000614 <__udivmodsi4_loop>:
 614:	aa 1f       	adc	r26, r26
 616:	bb 1f       	adc	r27, r27
 618:	ee 1f       	adc	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	a2 17       	cp	r26, r18
 61e:	b3 07       	cpc	r27, r19
 620:	e4 07       	cpc	r30, r20
 622:	f5 07       	cpc	r31, r21
 624:	20 f0       	brcs	.+8      	; 0x62e <__udivmodsi4_ep>
 626:	a2 1b       	sub	r26, r18
 628:	b3 0b       	sbc	r27, r19
 62a:	e4 0b       	sbc	r30, r20
 62c:	f5 0b       	sbc	r31, r21

0000062e <__udivmodsi4_ep>:
 62e:	66 1f       	adc	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	1a 94       	dec	r1
 638:	69 f7       	brne	.-38     	; 0x614 <__udivmodsi4_loop>
 63a:	60 95       	com	r22
 63c:	70 95       	com	r23
 63e:	80 95       	com	r24
 640:	90 95       	com	r25
 642:	9b 01       	movw	r18, r22
 644:	ac 01       	movw	r20, r24
 646:	bd 01       	movw	r22, r26
 648:	cf 01       	movw	r24, r30
 64a:	08 95       	ret

0000064c <strcmp>:
 64c:	fb 01       	movw	r30, r22
 64e:	dc 01       	movw	r26, r24
 650:	8d 91       	ld	r24, X+
 652:	01 90       	ld	r0, Z+
 654:	80 19       	sub	r24, r0
 656:	01 10       	cpse	r0, r1
 658:	d9 f3       	breq	.-10     	; 0x650 <strcmp+0x4>
 65a:	99 0b       	sbc	r25, r25
 65c:	08 95       	ret

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>
