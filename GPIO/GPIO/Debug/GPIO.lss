
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000184  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800120  00800120  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008eb  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e8  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ef  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	13 d0       	rcall	.+38     	; 0xea <main>
  c4:	5d c0       	rjmp	.+186    	; 0x180 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_6>:
#include <util/delay.h>
#include <stdbool.h>

volatile unsigned char signal = 0;
SIGNAL(INT5_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	signal = ~signal;
  d4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
  d8:	80 95       	com	r24
  da:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
}
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <main>:

int main()
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	a0 97       	sbiw	r28, 0x20	; 32
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
		
		1. 초기화
		2. stop/start
	*/
	
	DDRE = 0x00;
  fe:	12 b8       	out	0x02, r1	; 2
	DDRA = 0XFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a bb       	out	0x1a, r24	; 26
	EIMSK = 1 << INT5;
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	89 bf       	out	0x39, r24	; 57
	EICRB = 1<<ISC51;
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	8a bf       	out	0x3a, r24	; 58
	
	sei();
 10c:	78 94       	sei
	
	//int fnd_zs[] = 0	 1	2	3	 4	  5	   6	7	 8	  9 	A	 B	 C	  D	   E	F
	int fnd_zs[] = {0x3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X27,0X7F,0X6F,0X77,0X7C,0X39,0X5E,0X79,0X71};
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	de 01       	movw	r26, r28
 116:	11 96       	adiw	r26, 0x01	; 1
 118:	01 90       	ld	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	8a 95       	dec	r24
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x2e>
	int i = 0;
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
	
	while (1)
	{
		if(signal)
 124:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 128:	88 23       	and	r24, r24
 12a:	61 f0       	breq	.+24     	; 0x144 <main+0x5a>
		{
			PORTA = fnd_zs[i];
 12c:	f9 01       	movw	r30, r18
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	8c 0f       	add	r24, r28
 138:	9d 1f       	adc	r25, r29
 13a:	e8 0f       	add	r30, r24
 13c:	f9 1f       	adc	r31, r25
 13e:	80 81       	ld	r24, Z
 140:	8b bb       	out	0x1b, r24	; 27
 142:	f0 cf       	rjmp	.-32     	; 0x124 <main+0x3a>
		}
		else
		{
			PORTA = fnd_zs[i];
 144:	f9 01       	movw	r30, r18
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	8c 0f       	add	r24, r28
 150:	9d 1f       	adc	r25, r29
 152:	e8 0f       	add	r30, r24
 154:	f9 1f       	adc	r31, r25
 156:	80 81       	ld	r24, Z
 158:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	9f ed       	ldi	r25, 0xDF	; 223
 15c:	4e ea       	ldi	r20, 0xAE	; 174
 15e:	86 e1       	ldi	r24, 0x16	; 22
 160:	91 50       	subi	r25, 0x01	; 1
 162:	40 40       	sbci	r20, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x76>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x80>
 16a:	00 00       	nop
			_delay_ms(1000);
			if (fnd_zs[i] == 0x71)
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	81 37       	cpi	r24, 0x71	; 113
 172:	91 05       	cpc	r25, r1
 174:	11 f4       	brne	.+4      	; 0x17a <main+0x90>
			{
				i = -1;
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	3f ef       	ldi	r19, 0xFF	; 255
			}
			i++;
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	d2 cf       	rjmp	.-92     	; 0x124 <main+0x3a>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
