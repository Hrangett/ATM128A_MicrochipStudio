
TimerCount_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ae  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092f  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000816  00000000  00000000  00000d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000398  00000000  00000000  00001529  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026f  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	76 c0       	rjmp	.+236    	; 0x102 <__vector_5>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__vector_6>
  1a:	00 00       	nop
  1c:	ec c0       	rjmp	.+472    	; 0x1f6 <__vector_7>
  1e:	00 00       	nop
  20:	06 c1       	rjmp	.+524    	; 0x22e <__vector_8>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	fa c0       	rjmp	.+500    	; 0x2aa <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
unsigned int DoReMi[8] = {523.25,587.33,659.26,523.25,783,880,987,1046};
volatile unsigned char sound_flag = 1;

int main()
{
	DDRE = 0x08; //Buzzer -> PE3
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	82 b9       	out	0x02, r24	; 2
	
	TCCR3A = 0x00;
  bc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 1<<WGM33 |  1<<WGM32 | 1<<CS30;	//1분주
  c0:	89 e1       	ldi	r24, 0x19	; 25
  c2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00; // WGM3(3:0) = “1110”, Fast PWM, 모드 14
  c6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	TCNT3 = 0x0000; // 타이머3 카운터 초기화
  ca:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ce:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	EICRB = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xF0;
  d6:	80 ef       	ldi	r24, 0xF0	; 240
  d8:	89 bf       	out	0x39, r24	; 57
	EIFR = 0xF0;
  da:	88 bf       	out	0x38, r24	; 56
	sei();
  dc:	78 94       	sei
	
	while (1)
	{
		if(sound_flag)
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	88 23       	and	r24, r24
  e4:	e1 f3       	breq	.-8      	; 0xde <main+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9b e0       	ldi	r25, 0x0B	; 11
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x34>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x3e>
  f6:	00 00       	nop
		{
			_delay_ms(500);
			TCCR3A = 0x00;
  f8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
			sound_flag = 0;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	ee cf       	rjmp	.-36     	; 0xde <main+0x26>

00000102 <__vector_5>:
	
	return 0;
}

SIGNAL(INT4_vect) // 인터럽트 서비스 루틴
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	cli(); // 전체 인터럽트를 금지
 128:	f8 94       	cli
	
	ICR3 = F_CPU/DoReMi[0]/2; // 도의 음향을 연주한다
 12a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <DoReMi>
 12e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <DoReMi+0x1>
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e4       	ldi	r23, 0x40	; 64
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	93 d0       	rcall	.+294    	; 0x266 <__udivmodsi4>
 140:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 144:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	sei(); // 전체 인터럽트를 허용
 154:	78 94       	sei
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0b be       	out	0x3b, r0	; 59
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_6>:
SIGNAL(INT5_vect) // 인터럽트 서비스 루틴
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	0b b6       	in	r0, 0x3b	; 59
 188:	0f 92       	push	r0
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	cli(); // 전체 인터럽트를 금지
 1a2:	f8 94       	cli
	ICR3 = F_CPU/DoReMi[1]/2; // 래의 음향을 연주한다
 1a4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <DoReMi+0x2>
 1a8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <DoReMi+0x3>
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e4       	ldi	r23, 0x40	; 64
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	56 d0       	rcall	.+172    	; 0x266 <__udivmodsi4>
 1ba:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1be:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 1c2:	80 e4       	ldi	r24, 0x40	; 64
 1c4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 1ce:	78 94       	sei
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_7>:

SIGNAL(INT6_vect) // 인터럽트 서비스 루틴
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	cli(); // 전체 인터럽트를 금지
 204:	f8 94       	cli
	ICR3 = F_CPU/659.26/2; // 미의 음향을 연주한다
 206:	87 ed       	ldi	r24, 0xD7	; 215
 208:	95 e1       	ldi	r25, 0x15	; 21
 20a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 20e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 21e:	78 94       	sei
}
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_8>:
SIGNAL(INT7_vect) // 인터럽트 서비스 루틴
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
	cli(); // 전체 인터럽트를 금지
 23c:	f8 94       	cli
	ICR3 = F_CPU/698.46/2; // 파의 음향을 연주한다
 23e:	8d e9       	ldi	r24, 0x9D	; 157
 240:	94 e1       	ldi	r25, 0x14	; 20
 242:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 246:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR3A = 0x40; // PE4로 출력
 24a:	80 e4       	ldi	r24, 0x40	; 64
 24c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sound_flag = 1; // 부저 음이 발생하도록 설정
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei(); // 전체 인터럽트를 허용
 256:	78 94       	sei
}
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__udivmodsi4>:
 266:	a1 e2       	ldi	r26, 0x21	; 33
 268:	1a 2e       	mov	r1, r26
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	fd 01       	movw	r30, r26
 270:	0d c0       	rjmp	.+26     	; 0x28c <__udivmodsi4_ep>

00000272 <__udivmodsi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	ee 1f       	adc	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	a2 17       	cp	r26, r18
 27c:	b3 07       	cpc	r27, r19
 27e:	e4 07       	cpc	r30, r20
 280:	f5 07       	cpc	r31, r21
 282:	20 f0       	brcs	.+8      	; 0x28c <__udivmodsi4_ep>
 284:	a2 1b       	sub	r26, r18
 286:	b3 0b       	sbc	r27, r19
 288:	e4 0b       	sbc	r30, r20
 28a:	f5 0b       	sbc	r31, r21

0000028c <__udivmodsi4_ep>:
 28c:	66 1f       	adc	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	1a 94       	dec	r1
 296:	69 f7       	brne	.-38     	; 0x272 <__udivmodsi4_loop>
 298:	60 95       	com	r22
 29a:	70 95       	com	r23
 29c:	80 95       	com	r24
 29e:	90 95       	com	r25
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	bd 01       	movw	r22, r26
 2a6:	cf 01       	movw	r24, r30
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
